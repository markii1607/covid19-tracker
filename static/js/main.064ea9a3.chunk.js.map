{"version":3,"sources":["InfoBox.js","util.js","Map.js","Constants.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","appConstants","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","setColor","borderColor","setBorderColor","useEffect","fetch","then","response","json","rgba","fetchData","length","datasets","backgroundColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.064ea9a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n    return (\r\n        <Card \r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && 'infoBox--selected'} ${\r\n                isRed && 'infoBox--red'\r\n            }`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7DD71D\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#FB4443\",\r\n        multiplier: 2000,\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => b.cases - a.cases);\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') => \r\n    data.map(country => ( \r\n        <Circle \r\n            center = {[country.countryInfo.lat, country.countryInfo.long]} \r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));\r\n\r\nexport const prettyPrintStat = (stat) =>  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Draw circles on the screen */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","export const appConstants = {\r\n    'DISEASE_SH_URL': \"https://disease.sh/v3/covid-19\",\r\n}","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { useEffect } from 'react';\r\nimport { appConstants } from './Constants';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\n// Consolidate the data to format for the chart\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n}\r\n\r\nfunction LineGraph({ casesType = 'cases', ...props }) {\r\n    const [data, setData] = useState({});\r\n    const [color, setColor] = useState(\"rgba(204, 16, 52, 0.5)\");\r\n    const [borderColor, setBorderColor] = useState(\"#CC1034\");\r\n\r\n    // Fetch data from the API for the last 120 days\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(`${appConstants.DISEASE_SH_URL}/historical/all?lastdays=120`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n\r\n            if (casesType === 'cases') {\r\n                setBorderColor(props.color.cases.hex);\r\n                setColor(props.color.cases.rgba);\r\n            } else if (casesType === 'recovered') {\r\n                setBorderColor(props.color.recovered.hex);\r\n                setColor(props.color.recovered.rgba);\r\n            } else {\r\n                setBorderColor(props.color.deaths.hex);\r\n                setColor(props.color.deaths.rgba);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line data={{\r\n                    datasets: [{\r\n                        backgroundColor: color,\r\n                        borderColor: borderColor,\r\n                        data\r\n                    }]\r\n                }} options={options} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react';\r\nimport {MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\r\nimport './App.css';\r\nimport {useState} from 'react';\r\nimport {useEffect} from 'react';\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport { appConstants } from './Constants';\r\nimport Table from './Table';\r\nimport { prettyPrintStat, sortData } from './util';\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction App() {\r\n    const [countries, setCountries] = useState(['USA', 'UK', 'INDIA']);\r\n    const [country, setCountry] = useState('worldwide');\r\n    const [countryInfo, setCountryInfo] = useState({});\r\n    const [tableData, setTableData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\r\n    const [mapZoom, setMapZoom] = useState(3);\r\n    const [mapCountries, setMapCountries] = useState([]);\r\n    const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n    useEffect(() => {\r\n        fetch(`${appConstants.DISEASE_SH_URL}/all`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCountryInfo(data);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const getCountriesData = async() => {\r\n            await fetch(`${appConstants.DISEASE_SH_URL}/countries`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const countries = data.map(country => ({\r\n                        name: country.country, // United States, United Kingdom\r\n                        value: country.countryInfo.iso2 // UK, USA\r\n                    }));\r\n\r\n                    const sortedData = sortData(data);\r\n                    setTableData(sortedData);\r\n                    setCountries(countries);\r\n                    setMapCountries(data);\r\n                });\r\n        }\r\n\r\n        getCountriesData();\r\n    }, []);\r\n\r\n    const onCountryChange = async (event) => {\r\n        const countryCode = event.target.value;\r\n        \r\n        const url = countryCode === 'worldwide' ? \"/all\" : `/countries/${countryCode}`;\r\n        \r\n        await fetch(`${appConstants.DISEASE_SH_URL}${url}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setCountry(countryCode);\r\n                setCountryInfo(data);\r\n\r\n                if (countryCode !== 'worldwide') {\r\n                    setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n                    setMapZoom(4);\r\n                } else {\r\n                    setMapCenter([34.80746, -40.4796]);\r\n                    setMapZoom(3);\r\n                }\r\n            });\r\n    }\r\n\r\n    const color = {\r\n        cases: {\r\n            hex: \"#CC1034\",\r\n            rgba: \"rgba(204, 16, 52, 0.5)\",\r\n        },\r\n        recovered: {\r\n            hex: \"#7DD71D\",\r\n            rgba: \"rgba(125, 215, 29, 0.5)\",\r\n        },\r\n        deaths: {\r\n            hex: \"#FB4443\",\r\n            rgba: \"rgba(251, 68, 67, 0.5)\",\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__left\">\r\n                <div className=\"app__header\">\r\n                    <h1>COVID-19 TRACKER</h1>\r\n                    <FormControl className=\"app__dropdown\">\r\n                        <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\r\n                            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n                            {countries.map(country => (\r\n                                <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n\r\n                <div className=\"app__stats\">\r\n                    <InfoBox\r\n                        isRed\r\n                        active={casesType === \"cases\"}\r\n                        onClick={e => setCasesType('cases')} \r\n                        title=\"Coronavirus Cases\" \r\n                        cases={prettyPrintStat(countryInfo.todayCases)} \r\n                        total={prettyPrintStat(countryInfo.cases)} \r\n                    />\r\n                    <InfoBox\r\n                        active={casesType === \"recovered\"}\r\n                        onClick={e => setCasesType('recovered')} \r\n                        title=\"Recovered\" \r\n                        cases={prettyPrintStat(countryInfo.todayRecovered)} \r\n                        total={prettyPrintStat(countryInfo.recovered)} \r\n                    />\r\n                    <InfoBox\r\n                        isRed\r\n                        active={casesType === \"deaths\"}\r\n                        onClick={e => setCasesType('deaths')} \r\n                        title=\"Deaths\" \r\n                        cases={prettyPrintStat(countryInfo.todayDeaths)} \r\n                        total={prettyPrintStat(countryInfo.deaths)} \r\n                    />\r\n                </div>\r\n\r\n                {/* Map */}\r\n                <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\r\n            </div>\r\n\r\n            <Card className=\"app__right\">\r\n                <CardContent>\r\n                    <h3>Live Cases by Country</h3>\r\n                    <Table countries={tableData} />\r\n\r\n                    <h3 className=\"app__graph--text\">Worldwide new {casesType}</h3>\r\n                    <LineGraph className=\"app__graph\" casesType={casesType} color={color} />\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}